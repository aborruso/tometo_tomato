#!/usr/bin/env bash
# This script was generated by bashly 1.2.11 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  # Access arguments and flags
  INPUT_FILE="${args[input_file]}"
  REFERENCE_FILE="${args[reference_file]}"
  THRESHOLD="${args[--threshold]}"
  OUTPUT_CLEAN="${args[--output-clean]}"
  OUTPUT_AMBIGUOUS="${args[--output-ambiguous]}"
  SHOW_SCORE="${args[--show-score]}"

  # Get join pairs from flag (space separated)
  JOIN_PAIRS_RAW="${args[--join-pair]}"

  # If join pairs not specified, use common columns
  if [[ -z "$JOIN_PAIRS_RAW" ]]; then
  	# Read headers from both files
  	IFS=',' read -r -a input_cols < <(head -n 1 "$INPUT_FILE")
  	IFS=',' read -r -a ref_cols < <(head -n 1 "$REFERENCE_FILE")
  	# Find common columns
  	join_pairs=()
  	for col in "${input_cols[@]}"; do
  		for refcol in "${ref_cols[@]}"; do
  			if [[ "$col" == "$refcol" ]]; then
  				join_pairs+=("$col,$col")
  			fi
  		done
  	done
  else
  	# Parse join pairs from flag
  	IFS=' ' read -r -a join_pairs <<< "$JOIN_PAIRS_RAW"
  fi

  # Build SQL for DuckDB
  JOIN_PAIRS_SQL=""
  FIRST_PAIR=true
  for pair_string in "${join_pairs[@]}"; do
  	IFS=',' read -r REF_COL INPUT_COL <<< "$pair_string"
  	# Rimuovo virgolette, backslash e spazi
  	REF_COL="${REF_COL//\"/}"
  	REF_COL="${REF_COL//\'/}"
  	REF_COL="${REF_COL//\\/}"
  	REF_COL="${REF_COL// /}"
  	INPUT_COL="${INPUT_COL//\"/}"
  	INPUT_COL="${INPUT_COL//\'/}"
  	INPUT_COL="${INPUT_COL//\\/}"
  	INPUT_COL="${INPUT_COL// /}"
  	if [ "$FIRST_PAIR" = true ]; then
  		JOIN_PAIRS_SQL+="rapidfuzz_ratio(LOWER(ref.$REF_COL), LOWER(inp.$INPUT_COL))"
  		FIRST_PAIR=false
  	else
  		JOIN_PAIRS_SQL+=" + rapidfuzz_ratio(LOWER(ref.$REF_COL), LOWER(inp.$INPUT_COL))"
  	fi
  done

  # Build SELECT clause for LEFT JOIN
  INPUT_HEADER=$(head -n 1 "$INPUT_FILE")
  IFS=',' read -r -a input_cols <<< "$INPUT_HEADER"
  INPUT_COLS_LIST=""
  INPUT_COLS_LIST_NOPREFIX=""
  INPUT_COLS_SELECT=""
  for col in "${input_cols[@]}"; do
  	col_clean="${col//\"/}"
  	col_clean="${col_clean// /}"
  	if [[ -z "$INPUT_COLS_LIST" ]]; then
  		INPUT_COLS_LIST="b.$col_clean"
  		INPUT_COLS_LIST_NOPREFIX="$col_clean"
  		INPUT_COLS_SELECT="inp.$col_clean"
  	else
  		INPUT_COLS_LIST+=" , b.$col_clean"
  		INPUT_COLS_LIST_NOPREFIX+=" , $col_clean"
  		INPUT_COLS_SELECT+=" , inp.$col_clean"
  	fi
  done
  SELECT_CLEAN_COLS="$INPUT_COLS_SELECT"
  SELECT_AMBIGUOUS_COLS="$INPUT_COLS_LIST_NOPREFIX"
  # Aggiungi sempre il codice_comune_alfanumerico dal file di riferimento
  SELECT_CLEAN_COLS+=", bst.codice_comune_alfanumerico"
  if [[ -n "${args[--add-field]}" ]]; then
  	IFS=' ' read -r -a add_fields <<< "${args[--add-field]}"
  	for field in "${add_fields[@]}"; do
  		SELECT_CLEAN_COLS+=", bst.$field"
  		SELECT_AMBIGUOUS_COLS+=", a.$field"
  	done
  fi
  if [[ -n "$SHOW_SCORE" ]]; then
  	SELECT_CLEAN_COLS+=", bst.avg_score"
  	SELECT_AMBIGUOUS_COLS+=", avg_score"
  fi

  echo "🚀 Starting fuzzy join process..."
  mkdir -p "$(dirname "$OUTPUT_CLEAN")"
  duckdb <<EOF
INSTALL rapidfuzz FROM community;
LOAD rapidfuzz;
-- Script per LEFT JOIN che mantiene tutti i record del file di input
COPY (
	WITH input_with_id AS (
		SELECT ROW_NUMBER() OVER () AS input_id, *
		FROM read_csv_auto('$INPUT_FILE', header=true)
	),
	-- Calcoliamo tutti i punteggi per ogni combinazione
	all_scores AS (
		SELECT inp.input_id, inp.*, ref.*, ($JOIN_PAIRS_SQL) / ${#join_pairs[@]} AS avg_score
		FROM read_csv_auto('$REFERENCE_FILE', header=true) AS ref
		CROSS JOIN input_with_id AS inp
	),
	-- Per ogni record di input, troviamo il miglior match che supera la soglia
	best_matches AS (
		SELECT *, ROW_NUMBER() OVER(PARTITION BY input_id ORDER BY avg_score DESC) as rn
		FROM all_scores
		WHERE avg_score >= $THRESHOLD
	)
	-- LEFT JOIN: tutti i record di input + il miglior match se esiste
	SELECT $SELECT_CLEAN_COLS
	FROM input_with_id inp
	LEFT JOIN (SELECT * FROM best_matches WHERE rn = 1) bst ON inp.input_id = bst.input_id
) TO '$OUTPUT_CLEAN' (HEADER, DELIMITER ',');
EOF

  # Genera l'output ambiguo solo se il parametro è valorizzato
  if [[ -n "$OUTPUT_AMBIGUOUS" ]]; then
  duckdb <<EOF
INSTALL rapidfuzz FROM community;
LOAD rapidfuzz;
COPY (
	WITH input_with_id AS (
		SELECT ROW_NUMBER() OVER () AS input_id, *
		FROM read_csv_auto('$INPUT_FILE', header=true)
	),
	all_scores AS (
		SELECT inp.input_id, inp.*, ref.*, ($JOIN_PAIRS_SQL) / ${#join_pairs[@]} AS avg_score
		FROM read_csv_auto('$REFERENCE_FILE', header=true) AS ref
		CROSS JOIN input_with_id AS inp
	),
	best_matches AS (
		SELECT *, ROW_NUMBER() OVER(PARTITION BY input_id ORDER BY avg_score DESC) as rn
		FROM all_scores
		WHERE avg_score >= $THRESHOLD
	),
	ambiguous_inputs AS (
		SELECT input_id FROM best_matches WHERE rn = 1 GROUP BY input_id HAVING COUNT(*) > 1
	)
	SELECT $SELECT_AMBIGUOUS_COLS
	FROM all_scores s
	WHERE s.input_id IN (SELECT input_id FROM ambiguous_inputs)
) TO '$OUTPUT_AMBIGUOUS' (HEADER, DELIMITER ',');
EOF
  	if [ -f "$OUTPUT_AMBIGUOUS" ]; then
  		LINE_COUNT=$(wc -l < "$OUTPUT_AMBIGUOUS")
  		if [ "$LINE_COUNT" -eq 1 ]; then
  			rm "$OUTPUT_AMBIGUOUS"
  			echo "ℹ️ Nessun record ambiguo trovato. Il file $OUTPUT_AMBIGUOUS è stato cancellato."
  		else
  			echo "⚠️ Sono stati trovati record ambigui! Controlla il file: $OUTPUT_AMBIGUOUS"
  		fi
  	fi
  fi
  if [ -f "$OUTPUT_AMBIGUOUS" ]; then
  	LINE_COUNT=$(wc -l < "$OUTPUT_AMBIGUOUS")
  	if [ "$LINE_COUNT" -eq 1 ]; then
  		rm "$OUTPUT_AMBIGUOUS"
  		echo "🗑️ Deleted empty ambiguous matches file: $OUTPUT_AMBIGUOUS"
  	fi
  fi
  echo "✅ Fuzzy join complete."
  echo "- Clean matches saved to: $OUTPUT_CLEAN"
  echo "- Ambiguous matches saved to: $OUTPUT_AMBIGUOUS"

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
tometo_tomato_usage() {
  printf "tometo_tomato - Esegue un join fuzzy tra due file CSV, associando record simili anche in presenza di errori di battitura. Utilizza DuckDB e rapidfuzz per calcolare la somiglianza tra le colonne specificate. Output: un file con i match puliti e uno con i casi ambigui. Esempio: tometo_tomato input.csv ref.csv --join-pair 'regione,regio' --join-pair 'comune,comu' --add-field codice_comune --threshold 90 --show-score\n\n"

  printf "%s\n" "Usage:"
  printf "  tometo_tomato INPUT_FILE REFERENCE_FILE [OPTIONS]\n"
  printf "  tometo_tomato --help | -h\n"
  printf "  tometo_tomato --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--join-pair, -j PAIR_STRING (repeatable)"
    printf "    Coppia di colonne da confrontare (es: --join-pair regione regio). Puoi\n    specificare più coppie per join multi-colonna. Se omesso, verranno usate le\n    colonne con lo stesso nome.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--show-score, -s"
    printf "    Mostra il punteggio di somiglianza medio nel risultato.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--add-field, -a FIELD_NAME (repeatable)"
    printf "    Campo del file di riferimento da aggiungere all'output (es: codice_comune).\n"
    echo

    # :flag.usage
    printf "  %s\n" "--threshold, -t VALUE"
    printf "    Soglia minima di somiglianza (0-100) per considerare un match valido.\n"
    printf "    %s\n" "Default: 90"
    echo

    # :flag.usage
    printf "  %s\n" "--output-clean, -o PATH (required)"
    printf "    File di output per i match puliti.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--output-ambiguous, -u PATH"
    printf "    File di output per i match ambigui. Se non specificato, non viene generato.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "INPUT_FILE"
    printf "    File CSV da arricchire/correggere (es: input.csv)\n"
    echo

    # :argument.usage
    printf "  %s\n" "REFERENCE_FILE"
    printf "    File CSV di riferimento ufficiale (es: ref.csv)\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        tometo_tomato_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --join-pair | -j)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          escaped="$(printf '%q' "$2")"
          if [[ -z ${args['--join-pair']+x} ]]; then
            args['--join-pair']="$escaped"
          else
            args['--join-pair']="${args['--join-pair']} $escaped"
          fi
          shift
          shift
        else
          printf "%s\n" "--join-pair requires an argument: --join-pair, -j PAIR_STRING" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --show-score | -s)

        # :flag.case_no_arg
        args['--show-score']=1
        shift
        ;;

      # :flag.case
      --add-field | -a)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          escaped="$(printf '%q' "$2")"
          if [[ -z ${args['--add-field']+x} ]]; then
            args['--add-field']="$escaped"
          else
            args['--add-field']="${args['--add-field']} $escaped"
          fi
          shift
          shift
        else
          printf "%s\n" "--add-field requires an argument: --add-field, -a FIELD_NAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --threshold | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--threshold']="$2"
          shift
          shift
        else
          printf "%s\n" "--threshold requires an argument: --threshold, -t VALUE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output-clean | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--output-clean']="$2"
          shift
          shift
        else
          printf "%s\n" "--output-clean requires an argument: --output-clean, -o PATH" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output-ambiguous | -u)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--output-ambiguous']="$2"
          shift
          shift
        else
          printf "%s\n" "--output-ambiguous requires an argument: --output-ambiguous, -u PATH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['input_file']+x} ]]; then
          args['input_file']=$1
          shift
        # :argument.case
        elif [[ -z ${args['reference_file']+x} ]]; then
          args['reference_file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['input_file']+x} ]]; then
    printf "missing required argument: INPUT_FILE\nusage: tometo_tomato INPUT_FILE REFERENCE_FILE [OPTIONS]\n" >&2

    exit 1
  fi

  if [[ -z ${args['reference_file']+x} ]]; then
    printf "missing required argument: REFERENCE_FILE\nusage: tometo_tomato INPUT_FILE REFERENCE_FILE [OPTIONS]\n" >&2

    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args['--output-clean']+x} ]]; then
    printf "missing required flag: --output-clean, -o PATH\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--threshold']:-} ]] || args['--threshold']="90"

}

# :command.initialize
initialize() {
  declare -g version="0.1.0"
  set -e

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
