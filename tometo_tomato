#!/usr/bin/env bash
# This script was generated by bashly 1.2.11 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  echo "# This file is located at 'src/root_command.sh'."
  echo "# It contains the implementation for the 'tometo_tomato' command."
  echo "# The code you write here will be wrapped by a function named 'tometo_tomato_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
tometo_tomato_usage() {
  printf "tometo_tomato - Esegue un join fuzzy tra due file CSV, associando record simili anche in presenza di errori di battitura. Utilizza DuckDB e rapidfuzz per calcolare la somiglianza tra le colonne specificate. Output: un file con i match puliti e uno con i casi ambigui. Esempio: tometo_tomato input.csv ref.csv --join-pair 'regione,regio' --join-pair 'comune,comu' --add-field codice_comune --threshold 90 --show-score\n\n"

  printf "%s\n" "Usage:"
  printf "  tometo_tomato INPUT_FILE REFERENCE_FILE [OPTIONS]\n"
  printf "  tometo_tomato --help | -h\n"
  printf "  tometo_tomato --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--join-pair PAIR_STRING (repeatable)"
    printf "    Coppia di colonne da confrontare (es: --join-pair regione regio). Puoi\n    specificare pi√π coppie per join multi-colonna. Se omesso, verranno usate le\n    colonne con lo stesso nome.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--show-score"
    printf "    Mostra il punteggio di somiglianza medio nel risultato.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--add-field FIELD_NAME (repeatable)"
    printf "    Campo del file di riferimento da aggiungere all'output (es: codice_comune).\n"
    echo

    # :flag.usage
    printf "  %s\n" "--threshold VALUE"
    printf "    Soglia minima di somiglianza (0-100) per considerare un match valido.\n"
    printf "    %s\n" "Default: 90"
    echo

    # :flag.usage
    printf "  %s\n" "--output-clean PATH"
    printf "    File di output per i match puliti.\n"
    printf "    %s\n" "Default: data/processed/joined_istat_codes.csv"
    echo

    # :flag.usage
    printf "  %s\n" "--output-ambiguous PATH"
    printf "    File di output per i match ambigui.\n"
    printf "    %s\n" "Default: data/processed/ambiguous_istat_matches.csv"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "INPUT_FILE"
    printf "    File CSV da arricchire/correggere (es: input.csv)\n"
    echo

    # :argument.usage
    printf "  %s\n" "REFERENCE_FILE"
    printf "    File CSV di riferimento ufficiale (es: ref.csv)\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        tometo_tomato_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --join-pair)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          escaped="$(printf '%q' "$2")"
          if [[ -z ${args['--join-pair']+x} ]]; then
            args['--join-pair']="$escaped"
          else
            args['--join-pair']="${args['--join-pair']} $escaped"
          fi
          shift
          shift
        else
          printf "%s\n" "--join-pair requires an argument: --join-pair PAIR_STRING" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --show-score)

        # :flag.case_no_arg
        args['--show-score']=1
        shift
        ;;

      # :flag.case
      --add-field)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          escaped="$(printf '%q' "$2")"
          if [[ -z ${args['--add-field']+x} ]]; then
            args['--add-field']="$escaped"
          else
            args['--add-field']="${args['--add-field']} $escaped"
          fi
          shift
          shift
        else
          printf "%s\n" "--add-field requires an argument: --add-field FIELD_NAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --threshold)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--threshold']="$2"
          shift
          shift
        else
          printf "%s\n" "--threshold requires an argument: --threshold VALUE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output-clean)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--output-clean']="$2"
          shift
          shift
        else
          printf "%s\n" "--output-clean requires an argument: --output-clean PATH" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output-ambiguous)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--output-ambiguous']="$2"
          shift
          shift
        else
          printf "%s\n" "--output-ambiguous requires an argument: --output-ambiguous PATH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['input_file']+x} ]]; then
          args['input_file']=$1
          shift
        # :argument.case
        elif [[ -z ${args['reference_file']+x} ]]; then
          args['reference_file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['input_file']+x} ]]; then
    printf "missing required argument: INPUT_FILE\nusage: tometo_tomato INPUT_FILE REFERENCE_FILE [OPTIONS]\n" >&2

    exit 1
  fi

  if [[ -z ${args['reference_file']+x} ]]; then
    printf "missing required argument: REFERENCE_FILE\nusage: tometo_tomato INPUT_FILE REFERENCE_FILE [OPTIONS]\n" >&2

    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--threshold']:-} ]] || args['--threshold']="90"
  [[ -n ${args['--output-clean']:-} ]] || args['--output-clean']="data/processed/joined_istat_codes.csv"
  [[ -n ${args['--output-ambiguous']:-} ]] || args['--output-ambiguous']="data/processed/ambiguous_istat_matches.csv"

}

# :command.initialize
initialize() {
  declare -g version="0.1.0"
  set -e

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
